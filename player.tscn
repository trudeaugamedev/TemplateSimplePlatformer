[gd_scene load_steps=9 format=3 uid="uid://dmjs1mntieaic"]

[ext_resource type="Texture2D" uid="uid://dv8ubnb7k40od" path="res://Images/PlayerStill/_a_Frame1 copy.png" id="1_swvvb"]
[ext_resource type="Texture2D" uid="uid://l74ghddi55de" path="res://Images/PlayerStill/_a_Frame1.png" id="2_jtlaq"]
[ext_resource type="PackedScene" uid="uid://mr78l12aycpt" path="res://Camera.tscn" id="3_d3qek"]
[ext_resource type="PackedScene" uid="uid://ch64e32vj1c4u" path="res://InGameUI.tscn" id="4_yli00"]

[sub_resource type="GDScript" id="GDScript_jc3yj"]
script/source = "extends CharacterBody2D


@export var  SPEED = 300.0
@export var  JUMP_VELOCITY = -600.0

var spawner = null

var was_on_floor
@export var  hp = 10
var isDead = false

@onready var _animated_sprite = $AnimatedSprite2D
@onready var health_bar = $\"Camera/in game UI/CanvasLayer/HealthBar\"
@onready var the_bad_tiles = $\"../../DamageLayer\"
@onready var coyote_timer = $CoyoteTimer	
@onready var death_timer = $DeathTimer

func _ready() -> void:
	health_bar.max_value = hp


func _physics_process(delta: float) -> void:	
		
	if Input.is_action_pressed(\"ui_right\"):
		_animated_sprite.play(\"idle\")
	else:
		_animated_sprite.play(\"idle\")
		
	was_on_floor = is_on_floor()
	# Add the gravity. Manages Coyote Time
	if not is_on_floor():
		velocity += get_gravity() * delta
		
	# Handle jump.
	if Input.is_action_just_pressed(\"ui_accept\") && (is_on_floor() || !coyote_timer.is_stopped()):
		velocity.y = JUMP_VELOCITY
		coyote_timer.stop()
	
	
	health_bar.value = hp

	# stop all movements if character is dead
	if isDead:
		if(death_timer.is_stopped()):
			queue_free()
		return
	
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction := Input.get_axis(\"ui_left\", \"ui_right\")
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()
	
	if was_on_floor && !is_on_floor():
		coyote_timer.start()

func lose_health():
	hp -= 1
	if hp <= 0:
			die()
func gain_health():
	hp += 1
# add your custom behaviour when the character dies	
# JK it goes to spawn after 3 seconds.
func die():
	self.rotation_degrees = 90
	death_timer.start()
	isDead = true

func _on_hitbox_body_entered(body: Node2D) -> void:
	velocity.y = JUMP_VELOCITY
	lose_health()
"

[sub_resource type="SpriteFrames" id="SpriteFrames_aeq82"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_swvvb")
}, {
"duration": 1.0,
"texture": ExtResource("2_jtlaq")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_68cqn"]
size = Vector2(39, 92)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_lfyxs"]
size = Vector2(42.5, 99)

[node name="Player" type="CharacterBody2D" groups=["player"]]
script = SubResource("GDScript_jc3yj")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.2925, 0.2925)
sprite_frames = SubResource("SpriteFrames_aeq82")
animation = &"idle"
frame_progress = 0.656603

[node name="ObjectCollider" type="CollisionShape2D" parent="."]
visibility_layer = 5
position = Vector2(-1.5, 2)
shape = SubResource("RectangleShape2D_68cqn")

[node name="Hitbox" type="Area2D" parent="."]
collision_layer = 4
collision_mask = 4

[node name="HurtboxCollider" type="CollisionShape2D" parent="Hitbox"]
position = Vector2(-2, 2.5)
shape = SubResource("RectangleShape2D_lfyxs")
debug_color = Color(0.776214, 0, 0.0615261, 0.42)

[node name="Camera" parent="." instance=ExtResource("3_d3qek")]

[node name="in game UI" parent="Camera" instance=ExtResource("4_yli00")]

[node name="DeathTimer" type="Timer" parent="." groups=["player"]]
wait_time = 3.0
one_shot = true

[node name="CoyoteTimer" type="Timer" parent="."]
wait_time = 0.15
one_shot = true

[connection signal="body_entered" from="Hitbox" to="." method="_on_hitbox_body_entered"]
